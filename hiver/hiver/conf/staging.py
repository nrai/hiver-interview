"""
Django settings for demsense project.

Generated by 'django-admin startproject' using Django 2.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

from hiver.conf.base import *
from kombu import Queue, Exchange

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ENVIRONMENT = "local"

# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'hiver',
        'USER': 'Nitish',
        'PASSWORD': '',
        'HOST': '127.0.0.1',
        'PORT': '5432',
    }
}

# Celery Configs
CELERY_BROKER_URL = 'amqp://localhost'

# Celery Tasks
GENERATE_VECTOR_TASK = 'generate_vector'

# Queues
GENERATE_VECTOR_QUEUE = 'dev_generate_vector'

CELERY_ROUTES = {
    GENERATE_VECTOR_TASK: {
        'queue': GENERATE_VECTOR_QUEUE
    }
}

# Celery Queues
CELERY_QUEUES = (
    Queue(GENERATE_VECTOR_QUEUE, routing_key=GENERATE_VECTOR_QUEUE, exchange=Exchange(GENERATE_VECTOR_QUEUE)),
)

# Google API JSON File
GOOGLE_KEYFILE = 'Brillio-b283612d7a96.json'

LOGGING = {
    'version': 1,
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'request_id': {
                '()': 'log_request_id.filters.RequestIDFilter'
        },
    },
    'formatters': {
            'verbose': {
                'format': "[%(asctime)s] %(levelname)s [%(request_id)s] [%(name)s:%("
                          "lineno)s] %(""message)s",
                'datefmt': "%d/%b/%Y %H:%M:%S"
            },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true', 'request_id'],
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'application': {
                'level': 'DEBUG',
                'class': 'logging.handlers.TimedRotatingFileHandler',
                'when': 'midnight',
                'backupCount': 3,
                'filename': 'logs/hiver.log',
                'formatter': 'verbose',
                'filters': ['request_id'],
        },
    },
    'loggers': {
        'django.db.backends': {
            'level': 'DEBUG',
            'handlers': ['console'],
        },
        'hiver.apps.base': {
            'handlers': ['console'],
            'level': 'INFO',
        }
    }
}
